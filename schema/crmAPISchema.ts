/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/frontend/jobOrder': {
    /** List job orders with control over offsets and result size set */
    get: operations['FrontendService_ListJobOrders'];
  };
  '/api/v1/contacts': {
    /** List contacts with control over offsets and result size set */
    get: operations['APIService_ListContacts'];
  };
  '/api/v1/candidates': {
    /** List candidates with control over offsets and result size set */
    get: operations['APIService_ListCandidates'];
    post: operations['APIService_CreateCandidate'];
  };
  '/api/v1/candidates/findBySkill': {
    get: operations['APIService_GetCandidatesBySkills'];
  };
  '/api/v1/candidates/findByTag': {
    get: operations['APIService_GetCandidatesByTags'];
  };
  '/api/v1/candidates/{id}': {
    get: operations['APIService_GetCandidate'];
    put: operations['APIService_UpdateCandidate'];
    delete: operations['APIService_DeleteCandidate'];
  };
  '/api/v1/resumes': {
    post: operations['APIService_CreateResume'];
  };
  '/api/v1/resumes/uploadURL': {
    get: operations['APIService_GetResumeUploadURL'];
  };
  '/api/v1/resumes/upload': {
    put: operations['APIService_UploadResume'];
  };
  '/api/v1/address': {
    post: operations['APIService_CreateAddress'];
  };
  '/api/v1/address/{id}': {
    get: operations['APIService_GetAddress'];
    put: operations['APIService_UpdateAddress'];
    delete: operations['APIService_DeleteAddress'];
  };
  '/api/v1/clients': {
    /** List clients with control over offsets and result size set */
    get: operations['APIService_ListClients'];
    post: operations['APIService_CreateClient'];
  };
  '/api/v1/client/{id}': {
    get: operations['APIService_GetClient'];
    put: operations['APIService_UpdateClient'];
    delete: operations['APIService_DeleteClient'];
  };
  '/api/v1/requisitions': {
    /** Get all requisitions associated to a particular job order ID. */
    get: operations['APIService_GetRequisitionByJobOrderID'];
    post: operations['APIService_CreateRequisition'];
  };
  '/api/v1/requisitions/{id}': {
    get: operations['APIService_GetRequisition'];
    put: operations['APIService_UpdateRequisition'];
  };
  '/api/v1/opportunities': {
    /** Get all opportunities associated to a particular requisition ID. */
    get: operations['APIService_GetOpportunitiesByRequisitionID'];
    /** Create a new opportunity associated to a requisition and candidate */
    post: operations['APIService_CreateOpportunity'];
  };
  '/api/v1/opportunities/{id}': {
    /** Get an opportunity by id */
    get: operations['APIService_GetOpportunity'];
    put: operations['APIService_UpdateOpportunity'];
    delete: operations['APIService_DeleteOpportunity'];
  };
  '/api/v1/leads': {
    /** List leads with control over offsets and result size set */
    get: operations['APIService_ListLeads'];
    /** Create a new lead associated to a client and zero or more contacts */
    post: operations['APIService_CreateLead'];
  };
  '/api/v1/leads/{id}': {
    /** Get an existing lead */
    get: operations['APIService_GetLead'];
    /** Update an existing lead */
    put: operations['APIService_UpdateLead'];
  };
  '/api/v1/leads/{id}/contacts': {
    /** Update an existing lead contact relationship */
    put: operations['APIService_UpdateLeadContact'];
    /** Add a contact to an existing lead */
    post: operations['APIService_AddContactToLead'];
  };
  '/api/v1/leads/{leadID}/contacts/{contactID}': {
    /** Remove an existing lead contact relationship */
    delete: operations['APIService_DeleteContactFromLead'];
  };
  '/api/v1/jobOrder': {
    /** List job orders with control over offsets and result size set */
    get: operations['APIService_ListJobOrders'];
    post: operations['APIService_CreateJobOrder'];
  };
  '/api/v1/jobOrder/{id}': {
    get: operations['APIService_GetJobOrder'];
    put: operations['APIService_UpdateJobOrder'];
    delete: operations['APIService_DeleteJobOrder'];
  };
}

export interface components {
  schemas: {
    ListJobOrder: {
      id: number;
      summary: string;
      description?: string | null;
      clientID: number;
      clientEntityName: string;
      clientDBAName?: string | null;
      addressID?: number | null;
      addressLine1?: string | null;
      primaryOwnerID?: number | null;
      primaryOwnerFullName?: string | null;
      status: components['schemas']['v1JobOrderStatus'];
      applicationCount?: number | null;
      billRate?: number | null;
      /** Format: date-time */
      createdAt: string;
    };
    ListJobOrdersResponse: {
      jobOrders: components['schemas']['ListJobOrder'][];
      count: number;
      lastID: number | null;
    };
    v1Tag: {
      id?: number;
      description?: string;
      /** Format: date-time */
      createdAt?: string;
    };
    protobufAny: {
      '@type'?: string;
    } & { [key: string]: unknown };
    rpcStatus: {
      code?: number;
      message?: string;
      details?: components['schemas']['protobufAny'][];
    };
    v1Resume: {
      url?: string;
      experience?: { [key: string]: unknown };
    };
    v1Address: {
      line1?: string;
      line2?: string;
      line3?: string;
      city?: string;
      zipOrPostcode?: string;
      stateProvinceCounty?: string;
      countryCode?: string;
      otherDetails?: string;
    };
    v1AddressFull: components['schemas']['v1Address'] & {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    v1Contact: {
      id?: number;
      fullName: string;
      firstName?: string | null;
      lastName?: string | null;
      email?: string | null;
      personalEmail?: string | null;
      homePhone?: string | null;
      mobilePhone?: string | null;
      mailingAddressID?: number | null;
      /** Format: date-time */
      birthday?: string | null;
      avatarUrl?: string | null;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    v1ContactWithClientName: {
      contact: components['schemas']['v1Contact'];
      client?: {
        clientID: number;
        clientEntityName: string;
        clientDBAName?: string;
      };
    };
    v1ListContactsResponse: {
      contacts: components['schemas']['v1ContactWithClientName'][];
      count: number;
      lastID?: number | null;
    };
    v1Candidate: {
      fullName: string;
      firstName?: string | null;
      lastName?: string | null;
      email?: string | null;
      homePhone?: string | null;
      mobilePhone?: string | null;
      /** Format: date-time */
      birthday?: string | null;
      /** Format: date-time */
      availableToPlaceDate?: string | null;
      weeklyAvailableHours?: number | null;
      avatarURL?: string | null;
    };
    v1CandidateWithFKs: components['schemas']['v1Candidate'] & {
      mailingAddressID?: number;
      tagIDs?: number[];
      skillIDs?: number[];
    };
    v1CandidateFull: components['schemas']['v1Candidate'] & {
      id: number;
      mailingAddress?: components['schemas']['v1AddressFull'];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      resumes?: components['schemas']['v1Resume'][];
      tags?: components['schemas']['v1Tag'][];
      skills?: components['schemas']['v1Skill'][];
    };
    v1CreateCandidateRequest: {
      candidate?: components['schemas']['v1CandidateWithFKs'];
    };
    v1CreateCandidateResponse: {
      candidate?: components['schemas']['v1CandidateFull'];
    };
    v1DeleteCandidateResponse: {
      id?: number;
    };
    v1GetCandidateResponse: components['schemas']['v1CandidateFull'];
    v1ListCandidatesResponse: {
      candidates: components['schemas']['v1CandidateFull'][];
      count: number;
      lastID: number | null;
    };
    v1GetCandidatesBySkillsResponse: {
      candidates: components['schemas']['v1CandidateFull'][];
    };
    v1GetCandidatesByTagsResponse: {
      candidates: components['schemas']['v1CandidateFull'][];
    };
    v1Skill: {
      id?: number;
      description?: string;
      /** Format: date-time */
      createdAt?: string;
    };
    v1UpdateCandidateRequest: {
      candidate: components['schemas']['v1Candidate'] & {
        [key: string]: unknown;
      } & {
        mailingAddressID?: number;
      };
    };
    v1UpdateCandidateResponse: {
      candidate: components['schemas']['v1CandidateFull'];
    };
    v1CreateResumeRequest: {
      url: string;
      candidateID: number;
    };
    v1CreateResumeResponse: {
      id: number;
      url: string;
      candidateID: number;
    };
    v1UploadResumeResponse: {
      uploadURL: string;
      key: string;
    };
    v1GetResumeUploadURLResponse: {
      uploadURL: string;
      key: string;
    };
    v1CreateAddressRequest: {
      address: components['schemas']['v1Address'];
    };
    v1CreateAddressResponse: {
      address?: components['schemas']['v1AddressFull'];
    };
    v1GetAddressResponse: {
      address?: components['schemas']['v1AddressFull'];
    };
    v1UpdateAddressRequest: {
      address?: components['schemas']['v1Address'];
    };
    v1UpdateAddressResponse: {
      address?: components['schemas']['v1AddressFull'];
    };
    v1DeleteAddressResponse: {
      id: number;
    };
    v1Client: {
      id?: number;
      accountNumber?: number;
      entityName: string;
      dbaName?: string;
      description?: string;
      numberOfEmployees?: number;
      mailingAddressID?: number;
      phoneNumber?: string;
      faxNumber?: string;
      email?: string;
      website?: string;
      contractRate?: number;
      negotiatedRateDiscountPercent?: number;
      annualRevenue?: number;
      yearStarted?: number;
      /** @enum {string} */
      workWeekStart?:
        | 'Sunday'
        | 'Monday'
        | 'Tuesday'
        | 'Wednesday'
        | 'Thursday'
        | 'Friday'
        | 'Saturday';
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    v1CreateClientWithFKs: components['schemas']['v1Client'] & unknown;
    v1ClientWithFKs: components['schemas']['v1Client'] & {
      mailingAddressID?: number;
    };
    v1ClientFull: components['schemas']['v1Client'] & {
      mailingAddress?: components['schemas']['v1AddressFull'];
    };
    v1ClientHierarchyReference: {
      id: number;
      entityName: string;
      dbaName?: string;
    };
    v1ClientFullWithHierarchy: components['schemas']['v1ClientFull'] & {
      parents?: components['schemas']['v1ClientHierarchyReference'][];
      children?: components['schemas']['v1ClientHierarchyReference'][];
      mailingAddress?: components['schemas']['v1AddressFull'];
    };
    v1CreateClientRequest: {
      client: components['schemas']['v1CreateClientWithFKs'];
    };
    v1CreateClientResponse: {
      client?: components['schemas']['v1ClientFull'];
    };
    v1GetClientResponse: {
      client?:
        | components['schemas']['v1ClientFull']
        | components['schemas']['v1ClientFullWithHierarchy'];
    };
    v1ListClientsResponse: {
      clients?: components['schemas']['v1Client'][];
    };
    v1UpdateClientRequest: {
      client: components['schemas']['v1ClientWithFKs'];
    };
    v1UpdateClientResponse: {
      client?: components['schemas']['v1ClientFull'];
    };
    v1DeleteClientResponse: {
      id: number;
    };
    v1Requisition: {
      summary?: string;
      description?: string;
      payRate?: number;
      billRate?: number;
      /** Format: date-time */
      startDate?: string;
      /** Format: date-time */
      endDate?: string;
      estimatedHoursPerWeek?: number;
      originalOpenings?: number;
      currentOpenings?: number;
      /** Format: date-time */
      postedAt?: string;
      pdfURL?: string;
    };
    v1CreateRequisitionWithFKs: components['schemas']['v1Requisition'] &
      unknown & {
        jobOrderID: number;
        tagIDs?: number[];
        skillIDs?: number[];
      };
    v1UpdateRequisitionWithFKs: components['schemas']['v1Requisition'] & {
      jobOrderID?: number;
      mailingAddressID?: number;
    };
    v1UpdateRequisitionBody: {
      requisition: components['schemas']['v1UpdateRequisitionWithFKs'];
    };
    v1RequisitionFull: components['schemas']['v1Requisition'] &
      unknown & {
        id: number;
        client: components['schemas']['v1ClientHierarchyReference'];
        address?: components['schemas']['v1AddressFull'];
        tags?: components['schemas']['v1Tag'][];
        skills?: components['schemas']['v1Skill'][];
        /** Format: date-time */
        createdAt: string;
        /** Format: date-time */
        updatedAt: string;
      };
    v1CreateRequisitionRequest: {
      requisition: components['schemas']['v1CreateRequisitionWithFKs'];
    };
    v1CreateRequisitionResponse: {
      requisition: components['schemas']['v1RequisitionFull'];
    };
    v1GetRequisitionResponse: {
      requisition: components['schemas']['v1RequisitionFull'];
    };
    v1UpdateRequisitionRequest: components['schemas']['v1UpdateRequisitionBody'];
    v1UpdateRequisitionResponse: {
      requisition: components['schemas']['v1RequisitionFull'];
    };
    v1Opportunity: {
      id?: number;
      status?: string;
      notes?: string;
      priority?: string;
      reason_closed?: string;
    };
    v1OpportunityWithFKsUpdate: components['schemas']['v1Opportunity'] & {
      requisitionID?: number;
      candidateID?: number;
      clientID?: number;
    };
    v1OpportunityWithFKsCreate: components['schemas']['v1OpportunityWithFKsUpdate'] & unknown;
    v1OpportunityWithParentEntities: components['schemas']['v1Opportunity'] &
      ({
        candidate?: components['schemas']['v1CandidateFull'];
        requisition?: components['schemas']['v1RequisitionFull'];
        client?: components['schemas']['v1ClientFull'];
      } & {
        status: unknown;
      });
    v1OpportunityFull: components['schemas']['v1OpportunityWithFKsCreate'] & {
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    v1OpportunityAbbreviated: {
      id: number;
      candidateID: number;
      candidateFullName: string;
      description: string;
      status: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    v1CreateOpportunityRequest: {
      opportunity: components['schemas']['v1OpportunityWithFKsCreate'];
    };
    v1CreateOpportunityResponse: {
      opportunity: components['schemas']['v1OpportunityFull'];
    };
    v1GetOpportunityResponse: {
      opportunity:
        | components['schemas']['v1OpportunityFull']
        | components['schemas']['v1OpportunityWithParentEntities'];
    };
    v1UpdateOpportunityRequest: {
      opportunity?: components['schemas']['v1OpportunityWithFKsUpdate'];
    };
    v1UpdateOpportunityResponse: {
      opportunity: components['schemas']['v1OpportunityFull'];
    };
    v1GetOpportunitiesByRequisitionIDResponseFull: {
      opportunities: components['schemas']['v1OpportunityWithParentEntities'][];
    };
    v1GetOpportunitiesByRequisitionIDResponseAbbreviated: {
      opportunities: components['schemas']['v1OpportunityAbbreviated'][];
    };
    v1GetOpportunitiesByRequisitionIDResponse: {
      requisitions:
        | components['schemas']['v1GetOpportunitiesByRequisitionIDResponseAbbreviated']
        | components['schemas']['v1GetOpportunitiesByRequisitionIDResponseFull'];
    };
    v1DeleteOpportunityResponse: {
      id: number;
    };
    v1Lead: {
      id?: number;
      clientID?: number;
      status?: string;
      summary?: string;
      description?: string;
      percentChanceWin?: number;
      potentialRevenue?: number;
      notes?: string;
      primary_owner_id?: number;
      secondary_owner_id?: number;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    v1LeadCreate: components['schemas']['v1Lead'] & unknown;
    v1LeadContact: {
      id?: number;
      leadID: number;
      contactID: number;
      priority: number;
      /** Format: date-time */
      startDate?: string;
      /** Format: date-time */
      endDate?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    v1LeadWithLeadContacts: components['schemas']['v1Lead'] & {
      [key: string]: unknown;
    } & {
      leadContacts?: components['schemas']['v1LeadContact'][];
    } & unknown;
    v1LeadWithAbbreviatedContacts: components['schemas']['v1Lead'] & {
      [key: string]: unknown;
    } & {
      contacts?: components['schemas']['v1AbbreviatedContact'][];
      leadContacts?: components['schemas']['v1LeadContact'][];
    };
    v1CreateLeadRequest: {
      lead: components['schemas']['v1LeadWithLeadContacts'];
    };
    v1CreateLeadResponse: {
      lead: components['schemas']['v1LeadWithLeadContacts'];
    };
    v1ListLeadsResponse: {
      leads: components['schemas']['v1Lead'][];
    };
    v1GetLeadResponse: {
      lead: components['schemas']['v1Lead'];
      contacts?: components['schemas']['v1AbbreviatedContact'][];
      leadContacts?: components['schemas']['v1LeadContact'][];
    };
    v1UpdateLeadRequest: {
      lead?: components['schemas']['v1Lead'];
    };
    v1UpdateLeadResponse: {
      lead: components['schemas']['v1Lead'];
    };
    v1Interview: {
      status?: string;
      meetingURL?: string;
      notes?: string;
      /** Format: date-time */
      scheduledAt?: string;
    };
    v1AbbreviatedContact: {
      id?: number;
      fullName: string;
      firstName?: string;
      lastName?: string;
      email?: string;
      avatarURL?: string;
    };
    v1AddContactToLeadRequest: {
      leadContact: components['schemas']['v1LeadContact'];
    };
    v1AddContactToLeadResponse: {
      leadContact: components['schemas']['v1LeadContact'];
    };
    v1UpdateLeadContactBody: {
      contactID: number;
      priority?: number;
      /** Format: date-time */
      startDate?: string;
      /** Format: date-time */
      endDate?: string;
    };
    v1UpdateLeadContactRequest: {
      leadContact: components['schemas']['v1UpdateLeadContactBody'];
    };
    v1UpdateLeadContactResponse: {
      leadContact: components['schemas']['v1LeadContact'];
    };
    v1JobOrder: {
      id?: number;
      clientID: number;
      leadID?: number | null;
      status: components['schemas']['v1JobOrderStatus'];
      summary?: string | null;
      description?: string | null;
      externalURL?: string | null;
      attachmentURL?: string | null;
      primaryOwnerID?: number | null;
      secondaryOwnerID?: number | null;
      notes?: string | null;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    v1CreateJobOrderRequest: components['schemas']['v1JobOrder'];
    v1CreateJobOrderResponse: components['schemas']['v1JobOrder'];
    v1UpdateJobOrderRequest: components['schemas']['v1JobOrder'];
    v1UpdateJobOrderResponse: components['schemas']['v1JobOrder'];
    v1ListJobOrdersResponse: {
      jobOrders: components['schemas']['v1JobOrder'][];
    };
    v1GetJobOrderResponse: components['schemas']['v1JobOrder'];
    v1DeleteJobOrderResponse: {
      id?: number;
    };
    v1GetRequisitionsByJobOrderIDResponse: components['schemas']['v1RequisitionFull'][];
    /**
     * @default Unassigned
     * @enum {string}
     */
    v1JobOrderStatus: 'Unassigned' | 'Open' | 'InProgress' | 'WaitingOnClient' | 'Completed';
    Money: {
      /**
       * @description Amount expressed as a decimal number of major currency units
       * @example 99.95
       */
      amount: number;
      /**
       * @description 3 letter currency code as defined by ISO-4217
       * @example USD
       */
      currency: string;
    };
    Error: {
      code: number;
      message: string;
    };
  };
}

export interface operations {
  /** List job orders with control over offsets and result size set */
  FrontendService_ListJobOrders: {
    parameters: {
      query: {
        /** The number of job orders to skip before starting to collect the result set */
        lastSeenID?: number;
        /** The maximum number of job orders to return */
        limit?: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['ListJobOrdersResponse'];
        };
      };
      /** unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /** List contacts with control over offsets and result size set */
  APIService_ListContacts: {
    parameters: {
      query: {
        /** The number of candidates to skip before starting to collect the result set */
        lastSeenID?: number;
        /** The maximum number of candidates to return */
        limit?: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1ListContactsResponse'];
        };
      };
      /** unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /** List candidates with control over offsets and result size set */
  APIService_ListCandidates: {
    parameters: {
      query: {
        /** The number of candidates to skip before starting to collect the result set */
        lastSeenID?: number;
        /** The maximum number of candidates to return */
        limit?: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1ListCandidatesResponse'];
        };
      };
      /** unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  APIService_CreateCandidate: {
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1CreateCandidateResponse'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['v1CreateCandidateRequest'];
      };
    };
  };
  APIService_GetCandidatesBySkills: {
    parameters: {
      query: {
        skillID: number[];
        /** The number of candidates to skip before starting collect the result set */
        offset?: number;
        /** The maximum number of candidates to return */
        limit?: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetCandidatesBySkillsResponse'];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  APIService_GetCandidatesByTags: {
    parameters: {
      query: {
        tagID: number[];
        /** The number of candidates to skip before starting collect the result set */
        offset?: number;
        /** The maximum number of candidates to return */
        limit?: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetCandidatesByTagsResponse'];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  APIService_GetCandidate: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetCandidateResponse'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  APIService_UpdateCandidate: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1UpdateCandidateResponse'];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['v1UpdateCandidateRequest'];
      };
    };
  };
  APIService_DeleteCandidate: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1DeleteCandidateResponse'];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  APIService_CreateResume: {
    responses: {
      /** A successful response. */
      201: {
        content: {
          'application/json': components['schemas']['v1CreateResumeResponse'];
        };
      };
      /** Bad Request.  The passed in resume URL was likely not created via API resume upload calls. */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['v1CreateResumeRequest'];
      };
    };
  };
  APIService_GetResumeUploadURL: {
    parameters: {
      query: {
        /** File type of resume to be uploaded */
        filetype: 'pdf' | 'doc' | 'docx';
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetResumeUploadURLResponse'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  APIService_UploadResume: {
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1UploadResumeResponse'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
    requestBody: {
      content: {
        'application/octet-stream': string;
      };
    };
  };
  APIService_CreateAddress: {
    responses: {
      /** A successful response. */
      201: {
        content: {
          'application/json': components['schemas']['v1CreateAddressResponse'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['v1CreateAddressRequest'];
      };
    };
  };
  APIService_GetAddress: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetAddressResponse'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  APIService_UpdateAddress: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1UpdateAddressResponse'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['v1UpdateAddressRequest'];
      };
    };
  };
  APIService_DeleteAddress: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1DeleteAddressResponse'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /** List clients with control over offsets and result size set */
  APIService_ListClients: {
    parameters: {
      query: {
        /** The number of candidates to skip before starting to collect the result set */
        offset?: number;
        /** The maximum number of candidates to return */
        limit?: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1ListClientsResponse'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  APIService_CreateClient: {
    responses: {
      /** A successful response. */
      201: {
        content: {
          'application/json': components['schemas']['v1CreateClientResponse'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['v1CreateClientRequest'];
      };
    };
  };
  APIService_GetClient: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        /** Denotes whether references to parent and child clients should be included in the response */
        withHierarchy?: boolean;
      };
    };
    responses: {
      /** A successful response. */
      201: {
        content: {
          'application/json': components['schemas']['v1GetClientResponse'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  APIService_UpdateClient: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1UpdateClientResponse'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['v1UpdateClientRequest'];
      };
    };
  };
  APIService_DeleteClient: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1DeleteClientResponse'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /** Get all requisitions associated to a particular job order ID. */
  APIService_GetRequisitionByJobOrderID: {
    parameters: {
      query: {
        /** Denotes if the full associated job order should be returned instead of their respective ids */
        jobOrderID: number;
        /** If true abbreviated requisitions consisting of ID and description will be returned. */
        abbreviated?: boolean;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetRequisitionsByJobOrderIDResponse'];
        };
      };
      /** Bad request.  The request did not match the required format or the referenced job order id are invalid. */
      404: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  APIService_CreateRequisition: {
    responses: {
      /** A successful response. */
      201: {
        content: {
          'application/json': components['schemas']['v1CreateRequisitionResponse'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['v1CreateRequisitionRequest'];
      };
    };
  };
  APIService_GetRequisition: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** A successful response. */
      201: {
        content: {
          'application/json': components['schemas']['v1GetRequisitionResponse'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  APIService_UpdateRequisition: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** A successful response. */
      201: {
        content: {
          'application/json': components['schemas']['v1UpdateRequisitionResponse'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['v1UpdateRequisitionRequest'];
      };
    };
  };
  /** Get all opportunities associated to a particular requisition ID. */
  APIService_GetOpportunitiesByRequisitionID: {
    parameters: {
      query: {
        /** Denotes if the full associated requisition, client, and candidate object should be returned instead of their respective ids */
        requisitionID: number;
        /** If true abbreviated opportunities consisting of ID and description will be returned. */
        abbreviated?: boolean;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetOpportunitiesByRequisitionIDResponse'];
        };
      };
      /** Bad request.  The request did not match the required format or the referenced requisition/candidate IDs are invalid. */
      404: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /** Create a new opportunity associated to a requisition and candidate */
  APIService_CreateOpportunity: {
    responses: {
      /** A successful response. */
      201: {
        content: {
          'application/json': components['schemas']['v1CreateOpportunityResponse'];
        };
      };
      /** Bad request.  The request did not match the required format or the referenced requisition/candidate IDs are invalid. */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['v1CreateOpportunityRequest'];
      };
    };
  };
  /** Get an opportunity by id */
  APIService_GetOpportunity: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        /** Denotes if the full associated requisition, client, and candidate object should be returned instead of their respective ids */
        withFullRelatedEntities?: boolean;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetOpportunityResponse'];
        };
      };
      /** No candidate with the supplied ID was found. */
      404: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  APIService_UpdateOpportunity: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** A successful response. */
      201: {
        content: {
          'application/json': components['schemas']['v1UpdateOpportunityResponse'];
        };
      };
      /** No opportunity with the supplied ID was found. */
      404: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['v1UpdateOpportunityRequest'];
      };
    };
  };
  APIService_DeleteOpportunity: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1DeleteOpportunityResponse'];
        };
      };
      /** No opportunity with the supplied ID was found. */
      404: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** Opportunity can not be deleted as it is already referenced elsewhere. */
      409: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /** List leads with control over offsets and result size set */
  APIService_ListLeads: {
    parameters: {
      query: {
        /** The number of candidates to skip before starting to collect the result set */
        offset?: number;
        /** The maximum number of candidates to return */
        limit?: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1ListLeadsResponse'];
        };
      };
      /** unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /** Create a new lead associated to a client and zero or more contacts */
  APIService_CreateLead: {
    responses: {
      /** A successful response. */
      201: {
        content: {
          'application/json': components['schemas']['v1CreateLeadResponse'];
        };
      };
      /** Bad request.  The request did not match the required format or the referenced client/lead IDs are invalid. */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['v1CreateLeadRequest'];
      };
    };
  };
  /** Get an existing lead */
  APIService_GetLead: {
    parameters: {
      path: {
        /** The ID of the lead. */
        id: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetLeadResponse'];
        };
      };
      /** Lead not found. */
      404: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /** Update an existing lead */
  APIService_UpdateLead: {
    parameters: {
      path: {
        /** The ID of the lead. */
        id: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1UpdateLeadResponse'];
        };
      };
      /** Bad request.  The request did not match the required format or the referenced client ID is invalid. */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** Lead not found. */
      404: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['v1UpdateLeadRequest'];
      };
    };
  };
  /** Update an existing lead contact relationship */
  APIService_UpdateLeadContact: {
    parameters: {
      path: {
        /** The ID of the lead. */
        id: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1UpdateLeadContactResponse'];
        };
      };
      /** Bad request.  The request did not match the required format or the referenced contact IDs are invalid. */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** No existing lead contact relationship was found. */
      404: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['v1UpdateLeadContactRequest'];
      };
    };
  };
  /** Add a contact to an existing lead */
  APIService_AddContactToLead: {
    parameters: {
      path: {
        /** The ID of the lead. */
        id: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1AddContactToLeadResponse'];
        };
      };
      /** Bad request.  The request did not match the required format or the referenced contact IDs are invalid. */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['v1AddContactToLeadRequest'];
      };
    };
  };
  /** Remove an existing lead contact relationship */
  APIService_DeleteContactFromLead: {
    parameters: {
      path: {
        /** The ID of the lead. */
        leadID: number;
        /** The ID of the contact. */
        contactID: number;
      };
    };
    responses: {
      /** A successful response. */
      204: never;
      /** No existing lead contact relationship was found. */
      404: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /** List job orders with control over offsets and result size set */
  APIService_ListJobOrders: {
    parameters: {
      query: {
        /** The number of job orders to skip before starting to collect the result set */
        offset?: number;
        /** The maximum number of job orders to return */
        limit?: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1ListJobOrdersResponse'];
        };
      };
      /** unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  APIService_CreateJobOrder: {
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1CreateJobOrderResponse'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['v1CreateJobOrderRequest'];
      };
    };
  };
  APIService_GetJobOrder: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetJobOrderResponse'];
        };
      };
      /** unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  APIService_UpdateJobOrder: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1UpdateJobOrderResponse'];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['v1UpdateJobOrderRequest'];
      };
    };
  };
  APIService_DeleteJobOrder: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1DeleteJobOrderResponse'];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
}

export interface external {}
